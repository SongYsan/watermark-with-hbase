// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "THBaseService.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace apache::hadoop::hbase::thrift2;

class THBaseServiceHandler : virtual public THBaseServiceIf {
 public:
  THBaseServiceHandler() {
    // Your initialization goes here
  }

  bool exists(const std::string& table, const TGet& get) {
    // Your implementation goes here
    printf("exists\n");
  }

  void get(TResult& _return, const std::string& table, const TGet& get) {
    // Your implementation goes here
    printf("get\n");
  }

  void getMultiple(std::vector<TResult> & _return, const std::string& table, const std::vector<TGet> & gets) {
    // Your implementation goes here
    printf("getMultiple\n");
  }

  void put(const std::string& table, const TPut& put) {
    // Your implementation goes here
    printf("put\n");
  }

  bool checkAndPut(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const TPut& put) {
    // Your implementation goes here
    printf("checkAndPut\n");
  }

  void putMultiple(const std::string& table, const std::vector<TPut> & puts) {
    // Your implementation goes here
    printf("putMultiple\n");
  }

  void deleteSingle(const std::string& table, const TDelete& deleteSingle) {
    // Your implementation goes here
    printf("deleteSingle\n");
  }

  void deleteMultiple(std::vector<TDelete> & _return, const std::string& table, const std::vector<TDelete> & deletes) {
    // Your implementation goes here
    printf("deleteMultiple\n");
  }

  bool checkAndDelete(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const TDelete& deleteSingle) {
    // Your implementation goes here
    printf("checkAndDelete\n");
  }

  void increment(TResult& _return, const std::string& table, const TIncrement& increment) {
    // Your implementation goes here
    printf("increment\n");
  }

  void append(TResult& _return, const std::string& table, const TAppend& append) {
    // Your implementation goes here
    printf("append\n");
  }

  int32_t openScanner(const std::string& table, const TScan& scan) {
    // Your implementation goes here
    printf("openScanner\n");
  }

  void getScannerRows(std::vector<TResult> & _return, const int32_t scannerId, const int32_t numRows) {
    // Your implementation goes here
    printf("getScannerRows\n");
  }

  void closeScanner(const int32_t scannerId) {
    // Your implementation goes here
    printf("closeScanner\n");
  }

  void mutateRow(const std::string& table, const TRowMutations& rowMutations) {
    // Your implementation goes here
    printf("mutateRow\n");
  }

  void getScannerResults(std::vector<TResult> & _return, const std::string& table, const TScan& scan, const int32_t numRows) {
    // Your implementation goes here
    printf("getScannerResults\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<THBaseServiceHandler> handler(new THBaseServiceHandler());
  shared_ptr<TProcessor> processor(new THBaseServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}
